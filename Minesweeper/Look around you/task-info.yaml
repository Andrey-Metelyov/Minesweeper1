type: edu
custom_name: stage3
files:
- name: src/minesweeper/Main.kt
  visible: true
  text: |
    package minesweeper

    fun main() {
        print("Hello, World!")
    }
  learner_created: false
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.*;
    import java.util.stream.Collectors;

    public class MinesweeperTest extends StageTest<Integer> {
        @Override
        public List<TestCase<Integer>> generate() {
            List<TestCase<Integer>> tests = new ArrayList<>();
            for (int i = 1; i <= 50; i++) {
                int mines = i;
                TestCase<Integer> test = new TestCase<Integer>()
                    .setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        String output = main.execute("" + mines);
                        return test(output, mines);
                    });
                tests.add(test);
                tests.add(test);
            }
            return tests;
        }

        public CheckResult test(String reply, Integer attach) {
            List<String> lines =
                Arrays.stream(reply.split("\n"))
                    .map(String::trim)
                    .collect(Collectors.toList());

            if (lines.isEmpty()) {
                return CheckResult.wrong(
                    "Looks like you didn't output a single line!"
                );
            }

            if (lines.size() != 9) {
                return CheckResult.wrong(
                    "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                );
            }

            int mines = 0;

            for (String line : lines) {
                if (line.length() != 9) {
                    return CheckResult.wrong(
                        "One of the lines of the field doesn't have 9 symbols, " +
                            "but has " + line.length() + ".\n" +
                            "This line is \"" + line + "\""
                    );
                }

                for (char c : line.toCharArray()) {
                    if (c != 'X' && c != '.' && !(c >= '0' && c <= '9')) {
                        return CheckResult.wrong(
                            "One of the characters is not equal to 'X' or '.' or to a number.\n" +
                                "In this line: \"" + line + "\"."
                        );
                    }
                    if (c == 'X') {
                        mines++;
                    }
                }
            }

            if (attach != mines) {
                return CheckResult.wrong(
                    "Expected to see " + attach + " mines, found " + mines
                );
            }

            int[] around = new int[] {-1, 0, 1};

            for (int y = 0; y < lines.size(); y++) {
                String line = lines.get(y);
                for (int x = 0; x < line.length(); x++) {
                    char c = line.charAt(x);

                    if (c == 'X') {
                        continue;
                    }

                    int minesAround = 0;

                    for (int dx : around) {
                        for (int dy : around) {

                            int newX = x + dx;
                            int newY = y + dy;

                            if (0 <= newX && newX < 9 &&
                                0 <= newY && newY < 9) {

                                char newC = lines.get(newY).charAt(newX);

                                if (newC == 'X') {
                                    minesAround++;
                                }
                            }
                        }
                    }

                    if (minesAround == 0 && c != '.') {
                        return CheckResult.wrong(
                            "There are no mines around, but found number " + c + ".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                    if (minesAround != 0 && c != '0' + minesAround) {
                        return CheckResult.wrong(
                            "In this cell should be number " + minesAround + ", " +
                                "but found symbol \"" + c + "\".\n" +
                                "In line " + (y+1) + ", symbol " + (x+1) + "."
                        );
                    }

                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/minesweeper/GameBoard.kt
  visible: true
  text: |-
    package minesweeper

    import java.lang.IllegalArgumentException
    import kotlin.math.min
    import kotlin.math.max
    import kotlin.random.Random

    class GameBoard(val height: Int, val width: Int, mines: Int) {
        enum class CELL_STATE(val ch: String) {
            EMPTY("."),
            MINE("X"),
            MARK("?")
        }
        val grid = Array<Array<CELL_STATE>>(height) {
            Array(width) { CELL_STATE.EMPTY }
        }
        init {
            if (mines > height * width) {
                throw IllegalArgumentException("Number of mines ($mines) more than can hold ($height x $width = ${height * width}")
            }
            repeat(mines) {
                while (true) {
                    val row = Random.nextInt(0, height - 1)
                    val col = Random.nextInt(0, width - 1)
                    if (grid[row][col] != CELL_STATE.MINE) {
                        grid[row][col] = CELL_STATE.MINE
                        break
                    }
                }
            }
        }
        fun print() {
            for ((i, row) in grid.withIndex()) {
    //            System.err.println(row.joinToString("") { it.ch })
                for ((j, cell) in row.withIndex()) {
                    print(
                        if (cell != CELL_STATE.MINE) {
                            val mines = getMinesAround(i, j)
                            if (mines > 0) {
                                mines
                            } else {
                                cell.ch
                            }
                        } else {
                            cell.ch
                        }
                    )
                }
                println()
            }
        }

        private fun getMinesAround(row: Int, col: Int): Int {
            var count = 0
            for (i in max(0, row - 1)..min(height - 1, row + 1)) {
                for (j in max(0, col - 1)..min(width - 1, col + 1)) {
                    if (grid[i][j] == CELL_STATE.MINE) {
                        count++
                    }
                }
            }
            return count
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/8/stages/48/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 14 Aug 2021 14:41:05 UTC
record: -1
